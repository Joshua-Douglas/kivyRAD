import importlib
from dataclasses import dataclass
from kivy.clock import Clock


# To-Do:
# Implement hot reload of kvlang string

@dataclass
class HotReloadInstruction:
    updated_kvlang: str
    py_module_to_reload: str 

class VisualizationSubprocess:
    '''
    This class is designed to perform a hot reload kivy 
    applications that are executing in a subprocess. 

    The parent process can signal a reload by pushing an 
    updated kvlang string onto the processing queue. The
    processing queue should be populated with `HotReloadInstruction`s. 
    '''
    def __init__(self, cls_reload_app, hot_reload_queue_ref):
        # Note: Should probably add an error pipe so I can 
        # send exceptions back 
        if not isinstance(cls_reload_app):
            raise ValueError(f'Type expected for cls_reload_app, but {type(cls_reload_app)} found')
        self.reload_app = cls_reload_app()

        self.reload_queue = hot_reload_queue_ref
        Clock.schedule_interval(self.hot_reload, 0.1)

        self.reload_app.run()

    def hot_reload(self):
        '''
        Check the processing queue for reload instructions. 
        Perform the first instruction in the queue, if available.

        Note: In the future we could read to the last item and just
        perform the last since each task overwrites the previous. 
        '''
        # Note: Checking an mulitprocessing queue will block the
        # current thread. A return value of True from empty() does
        # not guarentee that the queue will not block, since other users
        # of the queue could empty it before our access. This class should
        # be the only actor poping from the queue. Disable blocking
        # and purposefully do not handle 'Empty' exceptions to enforce this.
        if self.reload_queue.empty():
            return 

        reload_instruction = self.reload_app.get()
        if reload_instruction.py_module_to_reload:
            importlib.reload(reload_instruction.py_module_to_reload)
        if reload_instruction.updated_kvlang:
            ## To-Do: Swap out the application root object in a way that
            ## is actually supported by the intended use of kivy. 
            ## Maybe app.remove_widget(app.root)
            ## app.add_widget(builder.load_string(updated_kvlang))
            pass
    
