<KDFilechooserLayout>:
    on_entry_added: treeview.add_node(args[1])
    on_entries_cleared: treeview.root.nodes = []
    on_subentry_to_entry: not args[2].locked and treeview.add_node(args[1], args[2])
    on_remove_subentry: args[2].nodes = []
    BoxLayout:
        pos: root.pos
        size: root.size
        size_hint: None, None
        orientation: 'vertical'
        padding: dp(10), 0, 0, 0
        BoxLayout:
            size_hint_y: None
            height: '30dp'
            orientation: 'horizontal'
            Label:
                text: 'Explorer'
                text_size: self.size
                halign: 'left'
                bold: True
            # File browsing buttons will go here!
            # New File, New Folder, Refresh Explorer, Collapse Folders
        ScrollView:
            id: scrollview
            do_scroll_x: False
            Scatter:
                do_rotation: False
                do_scale: False
                do_translation: False
                size: treeview.size
                size_hint_y: None
                TreeView:
                    id: treeview
                    hide_root: True
                    size_hint_y: None
                    width: scrollview.width
                    height: self.minimum_height
                    on_node_expand: root.controller.entry_subselect(args[1])
                    on_node_collapse: root.controller.close_subselection(args[1])

<KDFilechooser>:
    layout: layout
    KDFilechooserLayout:
        id: layout
        controller: root

# Use kvlang special syntax '-' to remove the inherited canvas instructions
<-KDFileChooserEntry>:
    orientation: 'horizontal'
    size_hint_y: None
    spacing: '8dp'
    height: '48dp' if dp(1) > 1 else '24dp'
    canvas.before:
        Color:
            rgba: self.color_selected if self.is_selected else self.odd_color if self.odd else self.even_color
        Rectangle:
            pos: [self.parent.x, self.y] if self.parent else [0, 0]
            size: [self.parent.width, self.height] if self.parent else [1, 1]
        Color:
            rgba: 1, 1, 1, 1
        Rectangle:
            source: self.get_entry_icon_path(not self.is_leaf, self.is_open, self.height, self.path)
            size: self.height / 1.5, self.height / 1.5
            pos: self.x - dp(20), int(self.center_y - (self.height / 1.5) * .5)
    canvas.after:
        Color:
            rgba: .5, .5, .5, .2
        Line:
            points: [self.parent.x, self.y, self.parent.right, self.y] if self.parent else []

# Templates are a deprecated kivy feature, but the implementation of 
# FileChooserController forces us to use them since the _ENTRY_TEMPLATE
# class var is used to instantiate new templated entries.
# The template is initialized with the following context dictionary:
#  {'name': str, 'get_nice_size': func, 'path': str, 'controller': ref,
#   'isdir': bool, 'parent': ref, 'sep': str}
[KDFilechooserEntryTemplate@KDFilechooserEntry]:
    path: ctx.path
    # Don't allow expansion of the ../ node
    is_leaf: not ctx.isdir or ctx.name.endswith('..' + ctx.sep) or self.locked
    on_touch_down: self.collide_point(*args[1].pos) and ctx.controller().entry_touched(self, args[1])
    on_touch_up: self.collide_point(*args[1].pos) and ctx.controller().entry_released(self, args[1])
    Label:
        id: filename
        text_size: self.width, None
        halign: 'left'
        shorten: True
        text: ctx.name
        font_name: ctx.controller().font_name